# Description in RU
-----------------------------------
Что это за программа?
  
  - Мобильное IOS-приложение для заказа еды.
  - Использована технология кроссплатформенной разработки мобильного приложения Xamarin (для ознакомления и интереса)
  - На бэкенде реализован RestApi. Использована база данных SQL. 
  - На мобильном приложении логика написана на C#, а внешний вид страниц - постраничная xaml верстка. Использована внутренняя база данных SqlLite.
  - Товаром являются суши, роллы и др. съестные "объекты". Подгрузка товаров в базу данных мобильного устройства осуществляется не во время захода в приложение, а во время попытки адресации по определенной вкладке (в демонстрации приложения специально выбрасывается сообщение "небольшая ошибочка, не найдено загруженных товаров" - именно в этот момент с мобильного приложения поступает запрос на сервер о скачивании целой "ветки" товаров, данная операция осуществляется). Для этого существует 3 базы данных: 
    - юзеры (логин, пароль, дополнительная информация о заказе), 
    - товары (название, цена, ТИП, который используется для подгрузки нужной категории товаров, и др. характеристики)
    - версии (версия загруженных товаров для сравнения во время отправки запроса на сервер)
-----------------------------------

комментарии к файлам:
  - в части файлов съехала табуляция

### SelfHostApiServer
В этой папке хранится бэкенд программы (консольное приложение на C#)
Она не скомпилится, т.к. потребует файлов из папки PhotoDatabase (фотографии товаров)

Строение бэкенда:
  Controllers - все контроллеры, получающие и обрабатывающие запросы с сервера
  GlobalSettings - глобальные настройки сервера (подключение к бд, адрес сервера (запускался только локально))
  Models - стандартная папка с использующимися классами
  Program.cs - файл с методом main()
  
### SushiApp
В этой папке хранится мобильное приложение
Для запуска потребуется также SushiApp.IOS - Xamarin-поддерживающий проект. 

Строение мобильного приложения:
  Data - контроль над внутренней бд
  Helpers - использовался хелпер для сериализации объектов
  Models - все классы, которые используются в приложении.
  Views - все страницы (.xaml (дизайн) и .xaml.cs (логика за ней))
